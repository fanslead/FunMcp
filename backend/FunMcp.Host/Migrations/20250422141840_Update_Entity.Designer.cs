// <auto-generated />
using FunMcp.Host.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FunMcp.Host.Migrations
{
    [DbContext(typeof(FunMcpDbContext))]
    [Migration("20250422141840_Update_Entity")]
    partial class Update_Entity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("FunMcp.Host.Data.Entities.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("AIServer")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxOutputTokens")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemPrompt")
                        .IsRequired()
                        .HasMaxLength(4128)
                        .HasColumnType("TEXT");

                    b.Property<float?>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<float?>("TopP")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("FunMcp.Host.Data.Entities.AgentMcpServer", b =>
                {
                    b.Property<string>("AgentId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("McpServerId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("McpServerTools")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.HasKey("AgentId", "McpServerId");

                    b.HasIndex("McpServerId");

                    b.ToTable("AgentMcpServers");
                });

            modelBuilder.Entity("FunMcp.Host.Data.Entities.Application", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("FunMcp.Host.Data.Entities.McpServer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalHeaders")
                        .HasMaxLength(4128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Arguments")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("Command")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConnectionTimeout")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Endpoint")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnvironmentVariables")
                        .HasMaxLength(4128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransportType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("McpServers");
                });

            modelBuilder.Entity("FunMcp.Host.Data.Entities.Agent", b =>
                {
                    b.HasOne("FunMcp.Host.Data.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("FunMcp.Host.Data.Entities.AgentMcpServer", b =>
                {
                    b.HasOne("FunMcp.Host.Data.Entities.Agent", "Agent")
                        .WithMany("ApplicationMcpServers")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FunMcp.Host.Data.Entities.McpServer", "McpServer")
                        .WithMany()
                        .HasForeignKey("McpServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("McpServer");
                });

            modelBuilder.Entity("FunMcp.Host.Data.Entities.Agent", b =>
                {
                    b.Navigation("ApplicationMcpServers");
                });
#pragma warning restore 612, 618
        }
    }
}
